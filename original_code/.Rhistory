pcs <- as.matrix(scaled_data_matrix) %*% loadings
pcs <- pcs[complete_rows, ]
# plot the underlying time series
plot(underlying_ts, type = 'l')
plot(underlying_ts, type = 'l')
View(underlying_ts)
View(underlying_ts)
plot(underlying_ts[, 1], type = 'l')
for (i in 1:ncol(scaled_data_matrix)) {
plot(m[, i], type = 'l')
title(paste("Column", i))
}
for (i in 1:ncol(scaled_data_matrix)) {
plot(scaled_data_matrix[, i], type = 'l')
title(paste("Column", i))
}
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(m),
xlab = "Time", ylab = "Value",
main = "Different Measures")
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures")
lines(underlying_ts[, 1], type = 'l', col = 'red')
lines(underlying_ts[, 4], type = 'l', col = 'red')
lines(underlying_ts[, 2], type = 'l', col = 'green')
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures")
matplot(underlying_ts, type = 'l', lty = 1, col = 1:ncol(underlying_ts),
xlab = "Time", ylab = "Value",
main = "Different PCA components")
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures")
# plot the first three columns of underlying_ts
lines(underlying_ts[, 1], type = 'l', col = 'red')
# Fit the factor model with 2 factors using principal component analysis (PCA) rotation
factor_model <- factanal(scaled_data_matrix, factors = 1, rotate = "principal")
# Print the factor analysis results
print(factor_model, digits = 2)
plot(factor_model, type = "n")
factor_model$loadings
# Fit the factor model with 2 factors using principal component analysis (PCA) rotation
factor_model <- factanal(scaled_data_matrix, factors = 2, rotate = "principal")
factor_model <- factanal(scaled_data_matrix, factors = 1, rotate = "principal")
for (i in 1:ncol(loadings)) {
ts <- scaled_data_matrix %*% loadings[,i]
plot(ts, type = 'l', main = paste0("Factor ", i), xlab = "Time", ylab = "Value")
}
# Fit the factor model with 2 factors using principal component analysis (PCA) rotation
factor_model <- factanal(scaled_data_matrix, factors = 1, rotate = "principal")
# Extract the factor loadings from the factor model
loadings <- factor_model$loadings
# Plot the time-series associated with each factor in the same graph
ts_combined <- rep(NA, nrow(data))
for (i in 1:ncol(loadings)) {
ts <- scaled_data_matrix %*% loadings[,i]
lines(ts, type = 'l', col = i, lwd = 2)
ts_combined <- ifelse(is.na(ts_combined), ts, ts_combined + ts)
}
# Plot the combined time-series
lines(ts_combined, type = 'l', col = 'black', lwd = 2, main = "Underlying Time Series", xlab = "Time", ylab = "Value")
# Fit the factor model with 2 factors using principal component analysis (PCA) rotation
factor_model <- factanal(scaled_data_matrix, factors = 1, rotate = "principal")
# Extract the factor loadings from the factor model
loadings <- factor_model$loadings
# Plot the time-series associated with each factor in the same graph
ts_combined <- rep(NA, nrow(data))
for (i in 1:ncol(loadings)) {
ts <- scaled_data_matrix %*% loadings[,i]
lines(ts, type = 'l', col = i, lwd = 2)
ts_combined <- ifelse(is.na(ts_combined), ts, ts_combined + ts)
}
# Fit the factor model with 2 factors using principal component analysis (PCA) rotation
factor_model <- factanal(scaled_data_matrix, factors = 1, rotate = "principal")
# Extract the factor loadings from the factor model
loadings <- factor_model$loadings
# Plot the time-series associated with each factor in the same graph
ts_combined <- rep(NA, nrow(data))
for (i in 1:ncol(loadings)) {
ts <- scaled_data_matrix %*% loadings[,i]
lines(ts, type = 'l', col = i, lwd = 2)
ts_combined <- ifelse(is.na(ts_combined), ts, ts_combined + ts)
}
ent analysis (PCA) rotation
factor_model <- factanal(scaled_data_matrix, factors = 1, rotate = "principal")
# Extract the factor loadings from the factor model
loadings <- factor_model$loadings
ts_combined <- rep(NA, nrow(data))
for (i in 1:ncol(loadings)) {
ts <- scaled_data_matrix %*% loadings[,i]
lines(ts, type = 'l', col = i, lwd = 2)
ts_combined <- ifelse(is.na(ts_combined), ts, ts_combined + ts)
}
ts_combined <- rep(NA, nrow(data))
plot()
ts_combined <- rep(NA, nrow(data))
for (i in 1:ncol(loadings)) {
ts <- scaled_data_matrix %*% loadings[,i]
#lines(ts, type = 'l', col = i, lwd = 2)
ts_combined <- ifelse(is.na(ts_combined), ts, ts_combined + ts)
}
plot(ts_combined, type = 'l', col = 'black', lwd = 2, main = "Underlying Time Series", xlab = "Time", ylab = "Value")
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures")
lines(ts_combined, type = 'l', col = 'black', lwd = 2, main = "Underlying Time Series", xlab = "Time", ylab = "Value")
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures")
lines(scaled_data_matrix %*% loadings[,1], type = 'l', col = 'pink', lwd = 2, main = "Underlying Time Series PC1", xlab = "Time", ylab = "Value")
lines(scaled_data_matrix %*% loadings[,2], type = 'l', col = 'pink', lwd = 2, main = "Underlying Time Series PC1", xlab = "Time", ylab = "Value")
loadings
loadings[,1]
loadings[,2]
# plot all columns in the same figure
matplot(data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures Before Scaling")
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures After Scaling")
lines(scaled_data_matrix %*% loadings[,1], type = 'l', col = 'pink', lwd = 2, main = "Underlying Time Series PC1", xlab = "Time", ylab = "Value")
# Fit the factor model with 2 factors using principal component analysis (PCA) rotation
factor_model <- factanal(scaled_data_matrix, factors = 2, rotate = "principal")
# Fit the factor model with 2 factors using principal component analysis (PCA) rotation
factor_model <- factanal(scaled_data_matrix, factors = 4, rotate = "principal")
# perform PCA
pca <- prcomp(scaled_data_matrix)
# determine the number of PCs to retain
plot(pca)
loadings <- pca$rotation
scores <- pca$x
# compute the underlying time series
underlying_ts <- as.matrix(scaled_data_matrix) %*% loadings
matplot(underlying_ts, type = 'l', lty = 1, col = 1:ncol(underlying_ts),
xlab = "Time", ylab = "Value",
main = "Different PCA components")
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures After Scaling")
# plot all columns in the same figure
matplot(underlying_ts, type = 'l', lty = 1, col = 1:ncol(underlying_ts),
xlab = "Time", ylab = "Value",
main = "Different PCA components")
# plot all columns in the same figure
matplot(-underlying_ts, type = 'l', lty = 1, col = 1:ncol(underlying_ts),
xlab = "Time", ylab = "Value",
main = "Different PCA components")
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures After Scaling")
# plot the first three columns of underlying_ts
lines(-underlying_ts[, 1], type = 'l', col = 'red')
matplot(data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures Before Scaling")
# plot all columns in the same figure
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures After Scaling")
pca <- prcomp(scaled_data_matrix)
# determine the number of PCs to retain
plot(pca)
# plot all columns in the same figure
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures After Scaling")
# plot the first three columns of underlying_ts
lines(-underlying_ts[, 1], type = 'l', col = 'red')
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures After Scaling")
# plot the first three columns of underlying_ts
lines(underlying_ts[, 1], type = 'l', col = 'red')
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures After Scaling")
# plot the first three columns of underlying_ts
lines(-underlying_ts[, 1], type = 'l', col = 'red')
# plot all columns in the same figure
matplot(-underlying_ts, type = 'l', lty = 1, col = 1:ncol(underlying_ts),
xlab = "Time", ylab = "Value",
main = "Different PCA components")
# plot all columns in the same figure
matplot(data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures Before Scaling")
lines(-underlying_ts[, 1], type = 'l', col = 'red')
save(data.frame(-underlying_ts[, 1]), file="data/PCA1.Rdata")
data.frame(-underlying_ts[, 1]
)
new_time_series = data.frame(-underlying_ts[, 1])
save(new_time_series, file="data/PCA1.Rdata")
save(new_time_series, file="data/PCA1.csv")
library(dplyr)
library(lubridate)
library(xtable)
library(ggplot2)
library(tidyr)
## measures from Bloomberg
load("data/bloomberg_uncertainty.RData")
bb <- data %>% as_tibble %>%
arrange(date) %>%
rename(SWIV = USSN011) %>%
mutate(SWIV = SWIV/100, SRVIX = SRVIX/100, MOVE = MOVE/100)
## TYVIX: 01/01/2002 discontinued 5/18/2020
## mpu
load("data/mpu10.RData")
data <- mpu10 %>%
rename(mpu = mpu10, bpvol = bpvol10, normal = normal10) %>%
select(-f10, -normal)
## Bundick's data
bun <- read.csv("data/bundick.csv") %>% as_tibble %>%
mutate(date = make_date(year, month, day)) %>%
select(date, edx4q)
## Swanson's data - Swanson and Williams
swan <- read.delim("data/swanson.txt", header=FALSE) %>% as_tibble %>%
mutate(date = as.Date(V1, "%Y  %m  %d"),
swan = V4 - V2) %>%
na.omit %>%
select(date, swan)
## TIV - 1982-2018, but from 2016-01-20 equal to TYVIX
tiv <- read.csv("data/tiv.csv", na.strings="#N/A") %>% as_tibble %>%
rename(date = Date, TIV = TIV_10y) %>%
mutate(date = as.Date(date, format  = "%m/%d/%Y")) %>%
select(date, TIV)
## combine data
data <- data %>%
left_join(bun) %>%
left_join(swan) %>%
left_join(bb) %>%
left_join(tiv)
## combine TIV and TYVIX
data %>% select(date, TIV, TYVIX) %>%
filter(date < make_date(2016, 01, 20)) %>%
na.omit %>% with(cor(TIV, TYVIX))
## from 2016/01/20 Philippe just used the TYVIX
data %>% select(date, TIV, TYVIX) %>%
filter(date >= make_date(2016, 01, 20)) %>%
na.omit %>% with(cor(TIV, TYVIX))
data$TIV <- rowMeans(cbind(data$TIV, data$TYVIX), na.rm=TRUE)
data$TYVIX <- NULL
# create the data matrix for all time series
# data_matrix = cbind(data$mpu, data$bpvol, data$edx4q, data$swan, data$SWIV, data$SRVIX, data$MOVE, data$TIV)
# data_matrix = as.matrix(data[, -1])
data_matrix = cbind(data$mpu, data$bpvol, data$MOVE, data$TIV)
data_matrix <- data_matrix[complete.cases(data_matrix), ]
# standardize the data
scaled_data_matrix = scale(data_matrix)
# perform PCA
pca <- prcomp(scaled_data_matrix)
# determine the number of PCs to retain
plot(pca)
# extract the loadings and scores from the PCA
loadings <- pca$rotation
scores <- pca$x
# compute the underlying time series
underlying_ts <- as.matrix(scaled_data_matrix) %*% loadings
# remove missing values from the underlying time series
complete_rows <- complete.cases(underlying_ts)
underlying_ts <- underlying_ts[complete_rows, ]
# save the first component of the PCA
new_time_series = data.frame(-underlying_ts[, 1])
selected_measures = cbind(data$date, data$mpu, data$bpvol, data$MOVE, data$TIV)
selected_measures <- selected_measures[complete.cases(selected_measures), ]
View(selected_measures)
View(selected_measures)
View(selected_measures)
View(selected_measures)
data$date
selected_measures = cbind(data$date, data$mpu, data$bpvol, data$MOVE, data$TIV)
View(selected_measures)
selected_measures = data.frame(data$date, data$mpu, data$bpvol, data$MOVE, data$TIV)
selected_measures <- selected_measures[complete.cases(selected_measures), ]
View(selected_measures)
data_matrix = as.matrix(selected_measures[, -1])
View(data_matrix)
selected_measures[, 1]
scaled_data_matrix = scale(data_matrix)
# perform PCA
pca <- prcomp(scaled_data_matrix)
# determine the number of PCs to retain
plot(pca)
# extract the loadings and scores from the PCA
loadings <- pca$rotation
scores <- pca$x
# compute the underlying time series
underlying_ts <- as.matrix(scaled_data_matrix) %*% loadings
# remove missing values from the underlying time series
complete_rows <- complete.cases(underlying_ts)
underlying_ts <- underlying_ts[complete_rows, ]
# save the first component of the PCA
new_time_series = data.frame(-underlying_ts[, 1])
View(new_time_series)
new_time_series = data.frame("PCA1", -underlying_ts[, 1])
View(new_time_series)
new_time_series = data.frame("PCA1" = -underlying_ts[, 1])
View(new_time_series)
new_time_series = cbind(selected_measures[,1], data.frame("PCA1" = -underlying_ts[, 1]))
View(new_time_series)
new_time_series = cbind(data.frame("date"=selected_measures[,1]), data.frame("PCA1" = -underlying_ts[, 1]))
View(new_time_series)
save(new_time_series, file="data/PCA1.csv")
View(bun)
View(new_time_series)
library(dplyr)
library(lubridate)
library(xtable)
library(ggplot2)
library(tidyr)
## measures from Bloomberg
load("data/bloomberg_uncertainty.RData")
bb <- data %>% as_tibble %>%
arrange(date) %>%
rename(SWIV = USSN011) %>%
mutate(SWIV = SWIV/100, SRVIX = SRVIX/100, MOVE = MOVE/100)
## TYVIX: 01/01/2002 discontinued 5/18/2020
## mpu
load("data/mpu10.RData")
data <- mpu10 %>%
rename(mpu = mpu10, bpvol = bpvol10, normal = normal10) %>%
select(-f10, -normal)
## Bundick's data
bun <- read.csv("data/bundick.csv") %>% as_tibble %>%
mutate(date = make_date(year, month, day)) %>%
select(date, edx4q)
## Swanson's data - Swanson and Williams
swan <- read.delim("data/swanson.txt", header=FALSE) %>% as_tibble %>%
mutate(date = as.Date(V1, "%Y  %m  %d"),
swan = V4 - V2) %>%
na.omit %>%
select(date, swan)
## TIV - 1982-2018, but from 2016-01-20 equal to TYVIX
tiv <- read.csv("data/tiv.csv", na.strings="#N/A") %>% as_tibble %>%
rename(date = Date, TIV = TIV_10y) %>%
mutate(date = as.Date(date, format  = "%m/%d/%Y")) %>%
select(date, TIV)
## combine data
data <- data %>%
left_join(bun) %>%
left_join(swan) %>%
left_join(bb) %>%
left_join(tiv)
## combine TIV and TYVIX
data %>% select(date, TIV, TYVIX) %>%
filter(date < make_date(2016, 01, 20)) %>%
na.omit %>% with(cor(TIV, TYVIX))
## from 2016/01/20 Philippe just used the TYVIX
data %>% select(date, TIV, TYVIX) %>%
filter(date >= make_date(2016, 01, 20)) %>%
na.omit %>% with(cor(TIV, TYVIX))
data$TIV <- rowMeans(cbind(data$TIV, data$TYVIX), na.rm=TRUE)
data$TYVIX <- NULL
# create the data matrix for all time series
# data_matrix = cbind(data$mpu, data$bpvol, data$edx4q, data$swan, data$SWIV, data$SRVIX, data$MOVE, data$TIV)
# data_matrix = as.matrix(data[, -1])
selected_measures = data.frame(data$date, data$mpu, data$bpvol, data$MOVE, data$TIV)
selected_measures <- selected_measures[complete.cases(selected_measures), ]
data_matrix = as.matrix(selected_measures[, -1])
# standardize the data
scaled_data_matrix = scale(data_matrix)
# perform PCA
pca <- prcomp(scaled_data_matrix)
# determine the number of PCs to retain
plot(pca)
# extract the loadings and scores from the PCA
loadings <- pca$rotation
scores <- pca$x
# compute the underlying time series
underlying_ts <- as.matrix(scaled_data_matrix) %*% loadings
# remove missing values from the underlying time series
complete_rows <- complete.cases(underlying_ts)
underlying_ts <- underlying_ts[complete_rows, ]
# save the first component of the PCA
new_time_series = cbind(data.frame("date"=selected_measures[,1]), data.frame("PCA1" = -underlying_ts[, 1]))
save(new_time_series, file="data/PCA1.csv")
write.csv(new_time_series, file="data/PCA1.csv", row.names = FALSE)
# plot all columns in the same figure
matplot(data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures Before Scaling")
lines(-underlying_ts[, 1], type = 'l', col = 'red')
matplot(data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures Before Scaling")
View(data_matrix)
View(data_matrix)
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures After Scaling")
matplot(-underlying_ts, type = 'l', lty = 1, col = 1:ncol(underlying_ts),
xlab = "Time", ylab = "Value",
main = "Different PCA components")
plot(pca)
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures After Scaling")
# plot the first three columns of underlying_ts
lines(-underlying_ts[, 1], type = 'l', col = 'red')
selected_measures = data.frame(data$date, data$bpvol, data$MOVE, data$TIV)
selected_measures <- selected_measures[complete.cases(selected_measures), ]
data_matrix = as.matrix(selected_measures[, -1])
# standardize the data
scaled_data_matrix = scale(data_matrix)
# perform PCA
pca <- prcomp(scaled_data_matrix)
# determine the number of PCs to retain
plot(pca)
# extract the loadings and scores from the PCA
loadings <- pca$rotation
scores <- pca$x
# compute the underlying time series
underlying_ts <- as.matrix(scaled_data_matrix) %*% loadings
# remove missing values from the underlying time series
complete_rows <- complete.cases(underlying_ts)
underlying_ts <- underlying_ts[complete_rows, ]
# save the first component of the PCA
new_time_series = cbind(data.frame("date"=selected_measures[,1]), data.frame("PCA1" = -underlying_ts[, 1]))
write.csv(new_time_series, file="data/PCA1.csv", row.names = FALSE)
# compute the principal components
pcs <- as.matrix(scaled_data_matrix) %*% loadings
pcs <- pcs[complete_rows, ]
# plot all columns in the same figure
matplot(data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures Before Scaling")
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures After Scaling")
# plot the first three columns of underlying_ts
lines(-underlying_ts[, 1], type = 'l', col = 'red')
matplot(-underlying_ts, type = 'l', lty = 1, col = 1:ncol(underlying_ts),
xlab = "Time", ylab = "Value",
main = "Different PCA components")
plot(pca)
matplot(-underlying_ts, type = 'l', lty = 1, col = 1:ncol(underlying_ts),
xlab = "Time", ylab = "Value",
main = "Different PCA components")
# save the first component of the PCA
new_time_series = cbind(data.frame("date"=selected_measures[,1]), data.frame("PCA1" = -underlying_ts[, 1]))
matplot(data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures Before Scaling")
lines(-underlying_ts[, 1], type = 'l', col = 'red')
selected_measures = data.frame(data$date, data$mpu, data$bpvol, data$MOVE)
selected_measures <- selected_measures[complete.cases(selected_measures), ]
data_matrix = as.matrix(selected_measures[, -1])
# standardize the data
scaled_data_matrix = scale(data_matrix)
# perform PCA
pca <- prcomp(scaled_data_matrix)
# determine the number of PCs to retain
plot(pca)
# extract the loadings and scores from the PCA
loadings <- pca$rotation
scores <- pca$x
# compute the underlying time series
underlying_ts <- as.matrix(scaled_data_matrix) %*% loadings
# remove missing values from the underlying time series
complete_rows <- complete.cases(underlying_ts)
underlying_ts <- underlying_ts[complete_rows, ]
# save the first component of the PCA
new_time_series = cbind(data.frame("date"=selected_measures[,1]), data.frame("PCA1" = -underlying_ts[, 1]))
write.csv(new_time_series, file="data/PCA1.csv", row.names = FALSE)
# compute the principal components
pcs <- as.matrix(scaled_data_matrix) %*% loadings
pcs <- pcs[complete_rows, ]
# plot all columns in the same figure
matplot(data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures Before Scaling")
lines(-underlying_ts[, 1], type = 'l', col = 'red')
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures After Scaling")
# plot the first three columns of underlying_ts
lines(-underlying_ts[, 1], type = 'l', col = 'red')
pca <- prcomp(data_matrix)
pca <- prcomp(data_matrix)
# determine the number of PCs to retain
plot(pca)
# extract the loadings and scores from the PCA
loadings <- pca$rotation
scores <- pca$x
# compute the underlying time series
# underlying_ts <- as.matrix(scaled_data_matrix) %*% loadings
underlying_ts <- as.matrix(data_matrix) %*% loadings
complete_rows <- complete.cases(underlying_ts)
underlying_ts <- underlying_ts[complete_rows, ]
# save the first component of the PCA
new_time_series = cbind(data.frame("date"=selected_measures[,1]), data.frame("PCA1" = -underlying_ts[, 1]))
write.csv(new_time_series, file="data/PCA1.csv", row.names = FALSE)
# compute the principal components
pcs <- as.matrix(scaled_data_matrix) %*% loadings
pcs <- pcs[complete_rows, ]
# plot all columns in the same figure
matplot(data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures Before Scaling")
lines(-underlying_ts[, 1], type = 'l', col = 'red')
# plot all columns in the same figure
matplot(scaled_data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures After Scaling")
# plot the first three columns of underlying_ts
lines(-underlying_ts[, 1], type = 'l', col = 'red')
# plot all columns in the same figure
matplot(data_matrix, type = 'l', lty = 1, col = 1:ncol(scaled_data_matrix),
xlab = "Time", ylab = "Value",
main = "Different Measures Before Scaling")
lines(-underlying_ts[, 1], type = 'l', col = 'red')
